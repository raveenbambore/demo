#spring.cloud.gcp.project-id=test123-324703
#spring.cloud.gcp.credentials.location=/Users/rramananda/Desktop/work/gcp-demo/client_secret_525052722947-mo31fti8dd5uamr2krcal1924obbjqee.apps.googleusercontent.com.json
##spring.cloud.gcp.credentials.scopes=[SCOPE_1],[SCOPE_2],[SCOPE_3]
#spring.datasource.continue-on-error=true
## Enforces database initialization
#spring.datasource.initialization-mode=always
#spring.main.allow-bean-definition-overriding=true
#spring.cloud.gcp.project-id=test123-324703
#spring.cloud.gcp.credentials.location=file:/Users/rramananda/Desktop/work/gcp-demo/client_secret_525052722947-mo31fti8dd5uamr2krcal1924obbjqee.apps.googleusercontent.com.json
#spring.cloud.gcp.sql.database-name=mysql123
#spring.cloud.gcp.sql.instance-connection-name=test123-324703:us-west2:mysql123
#spring.main.allow-bean-definition-overriding=true
# So app starts despite "table already exists" errors.
#spring.datasource.continue-on-error=true
# Enforces database initialization
#spring.datasource.initialization-mode=always

# Leave empty for root, uncomment and fill out if you specified a user
#spring.datasource.username=

# Uncomment if root password is specified
#spring.datasource.password=

## MySQL
spring.datasource.url=jdbc:mysql://google/mysql123?cloudSqlInstance=test123-324703:us-west2:mysql123&socketFactory=com.google.cloud.sql.mysql.SocketFactory&user=root&password=Apple@123
#spring.datasource.url=jdbc:google:mysql://test123-324703:us-west2:mysql123/test
spring.datasource.username=root
spring.datasource.password=Apple@123
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#`hibernate_sequence' doesn't exist
#spring.jpa.hibernate.use-new-id-generator-mappings=false

# drop n create table, good for testing, comment this in production
#spring.jpa.hibernate.ddl-auto=create
